{"version":3,"sources":["shared/components/UIElements/LoginCard.js","shared/pages/Authentication.js"],"names":["LoginCard","props","className","style","children","validationSchema","yup","username","required","password","min","Authentication","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","Fragment","MainNavigation","TextSection","type","color","ErrorModal","header","onClear","LoadingSpinner","asOverlay","marginTop","initialValues","onSubmit","data","a","setSubmitting","resetForm","process","JSON","stringify","responseData","login","userId","token","isSubmitting","FormTextField","placeholder","name","variant","width","spacing","marginBottom","SmallButton","disabled","MainFooter","SecondaryFooter"],"mappings":"6NAYeA,G,OARG,SAAAC,GAChB,OACE,yBAAKC,UAAS,oBAAeD,EAAMC,WAAaC,MAAOF,EAAME,OAC1DF,EAAMG,Y,iECWPC,EAAmBC,IAAW,CAClCC,SAAUD,MAEPE,WACHC,SAAUH,MAEPE,WACAE,IAAI,KAgFMC,UA3EQ,WAErB,IAAMC,EAAOC,qBAAWC,KAFG,EAG2BC,cAA9CC,EAHmB,EAGnBA,UAAWC,EAHQ,EAGRA,MAAOC,EAHC,EAGDA,YAAaC,EAHZ,EAGYA,WAEvC,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAaC,KAAK,gBAAgBC,MAAM,WACtC,kBAACC,EAAA,EAAD,CAAYC,OAAQ,mBAAmBT,MAAOA,EAAOU,QAASR,IAC9D,kBAAC,EAAD,KACGH,GAAa,kBAACY,EAAA,EAAD,CAAgBC,WAAS,IACvC,wBAAI1B,MAAO,CAAC2B,UAAW,OAAvB,YACA,2DACA,kBAAC,IAAD,CACEC,cAAe,CACbxB,SAAU,GACVE,SAAU,IAEZJ,iBAAkBA,EAElB2B,SAAQ,uCAAE,WAAOC,EAAP,sBAAAC,EAAA,6DAAcC,EAAd,EAAcA,cAAeC,EAA7B,EAA6BA,UACrCD,GAAc,GADN,kBAGqBjB,EAAY,GAAD,OACjCmB,kDADiC,gBAEpC,OACAC,KAAKC,UAAU,CACbhC,SAAU0B,EAAK1B,SACfE,SAAUwB,EAAKxB,WAEjB,CACE,eAAgB,qBAXd,OAGA+B,EAHA,OAcNL,GAAc,GACdC,IACAxB,EAAK6B,MAAMD,EAAaE,OAAQF,EAAajC,SAAUiC,EAAaG,OAhB9D,4GAAF,0DAqBP,gBAAEC,EAAF,EAAEA,aAAF,OACC,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CACEC,YAAY,YACZC,KAAK,WACLC,QAAQ,WACRC,MAAM,MACNC,QAAQ,OACR1B,MAAM,YAER,kBAACqB,EAAA,EAAD,CACEC,YAAY,YACZC,KAAK,WACLxB,KAAK,WACLyB,QAAQ,WACRC,MAAM,MACNC,QAAQ,OACR1B,MAAM,YAER,yBAAKrB,MAAO,CAAC2B,UAAU,OAAQqB,aAAc,SAC3C,kBAACC,EAAA,EAAD,CAAaC,SAAUT,EAAcrB,KAAK,SAASC,MAAM,QAAQyB,MAAM,OAAvE,iBAOZ,kBAACK,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD","file":"static/js/24.8868a441.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './LoginCard.css';\r\n\r\nconst LoginCard = props => {\r\n  return (\r\n    <div className={`logincard ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginCard;\r\n","import React, { useContext} from 'react';\r\n\r\nimport MainNavigation from '../components/Navigation/MainNavigation';\r\nimport MainFooter from '../components/Navigation/MainFooter';\r\nimport SecondaryFooter from '../components/Navigation/SecondaryFooter';\r\n\r\nimport TextSection from '../components/UIElements/TextSection';\r\nimport LoginCard from '../../shared/components/UIElements/LoginCard';\r\n\r\nimport { Formik, Form} from 'formik';\r\nimport { AuthContext } from '../context/auth-context';\r\nimport { useHttpClient } from '../components/hooks/http-hook';\r\nimport * as yup from 'yup';\r\nimport FormTextField from '../components/FormElements/FormTextField';\r\nimport SmallButton from '../components/FormElements/SmallButton';\r\nimport ErrorModal from '../components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../components/UIElements/LoadingSpinner';\r\n\r\nconst validationSchema = yup.object({\r\n  username: yup\r\n    .string()\r\n    .required(),\r\n  password: yup\r\n    .string()\r\n    .required()\r\n    .min(4)\r\n});\r\n\r\n\r\n\r\nconst Authentication = () => {\r\n\r\n  const auth = useContext(AuthContext)\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainNavigation />\r\n      <TextSection type=\"center normal\" color=\"#404040\" >\r\n        <ErrorModal header= \"An Error Occured\" error={error} onClear={clearError} />\r\n        <LoginCard>\r\n          {isLoading && <LoadingSpinner asOverlay />}\r\n          <h1 style={{marginTop: \"5%\"}}> Log in </h1>\r\n          <h3> Access your dashboard here</h3>\r\n          <Formik \r\n            initialValues={{\r\n              username: \"\",\r\n              password: \"\",\r\n            }} \r\n            validationSchema={validationSchema}\r\n\r\n            onSubmit={async (data, {setSubmitting, resetForm}) =>  {\r\n              setSubmitting(true)\r\n              try {\r\n                const responseData = await sendRequest(\r\n                  `${process.env.REACT_APP_BACKEND_URL}/users/login`,\r\n                  'POST',\r\n                  JSON.stringify({\r\n                    username: data.username,\r\n                    password: data.password\r\n                  }),\r\n                  {\r\n                    'Content-Type': 'application/json'\r\n                  }\r\n                );\r\n                setSubmitting(false)\r\n                resetForm();\r\n                auth.login(responseData.userId, responseData.username, responseData.token);\r\n              } catch (err) {\r\n              }\r\n            }}\r\n          >\r\n            {({isSubmitting}) => (\r\n              <Form>\r\n                <FormTextField \r\n                  placeholder=\"Username:\" \r\n                  name=\"username\" \r\n                  variant=\"outlined\"\r\n                  width=\"80%\"\r\n                  spacing=\"2rem\"\r\n                  color=\"#F5F5F5\"\r\n                />\r\n                <FormTextField\r\n                  placeholder=\"Password:\" \r\n                  name=\"password\" \r\n                  type=\"password\" \r\n                  variant=\"outlined\"\r\n                  width=\"80%\"\r\n                  spacing=\"2rem\"\r\n                  color=\"#F5F5F5\"\r\n                />\r\n                <div style={{marginTop:\"3rem\", marginBottom: \"2rem\"}}>\r\n                  <SmallButton disabled={isSubmitting} type=\"submit\" color=\"black\" width=\"80%\">Log in</SmallButton>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </LoginCard>\r\n      </TextSection>\r\n      <MainFooter />\r\n      <SecondaryFooter />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Authentication;"],"sourceRoot":""}